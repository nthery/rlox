// Naive (no memoization) recursive Fibonnacci function
fun rec_fib(n) {
    if (n < 1)
        return 0;
    if (n == 1)
        return 1;
    return rec_fib(n-1) + rec_fib(n-2);
}

var t = clock();
print rec_fib(0);
print rec_fib(1);
print rec_fib(4);
print rec_fib(10);
print rec_fib(25);
print clock() - t;

// Iterative Fibonnacci function
fun iter_fib(n) {
    var sum_1=1;
    var sum_2=0;

    var i=1;
    while (i < n) {
        var sum = sum_1 + sum_2;        
        sum_2 = sum_1;
        sum_1 = sum;
        i = i + 1;
    }

    return sum_1;
}

t = clock();
print iter_fib(0);
print iter_fib(1);
print iter_fib(4);
print iter_fib(10);
print iter_fib(25);
print clock() - t;
